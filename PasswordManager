using System;

namespace SavingInterface
{
  class PasswordManager : IDisplayable, IResetable
  {
    public string password;
    //automatic property for string Password
    private string Password
    { get { return password ; }
      set { 
            if (value.Length >= 8) 
            {password = value ; }
            else
            { Console.Write("Not accepted. Password must have at least 8 characters."); }
          }
    }

    //auto property for bool Hidden
    public bool Hidden
    { get; private set; }

    public string HeaderSymbol
    { get; private set;}

    //constructor 2 parameters: string and bool.
    //sets the previous string and bool to those input by user
    public PasswordManager(string password, bool hidden)
    {
      HeaderSymbol = "*-------*";
      Password = password;
      Hidden = hidden;
    }

    public void Display()
    {
      Console.WriteLine($"\n{HeaderSymbol} \nPassword:");
      if (Hidden == false)
      {
        Console.WriteLine($"{Password}");
      }
      else
      {
        for (int i = 0 ; i < Password.Length ; i++)
        {
          Console.Write("*");
        }
      Console.WriteLine();
      }
    }

    public void Reset()
    {
      Password = null;
      Hidden = false;
    }

    //Users can change password for b if they input the correct initial password a. Users confirm if they want password hidden or not - if unspecified, password is auto hidden.
    public bool ChangePassword(string a, string b, bool c = true)
    {
      Hidden = c;
      if (a == Password)
      {
        Password = b;
        return true;
      }
      else
      {
        return false;
      }
    }



  }
}
